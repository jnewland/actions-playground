name: pr
on:
  pull_request:
    types:
      - synchronize
      - opened
jobs:
  create-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.repos.createCommitStatus({
              owner:   context.repo.owner,
              repo:    context.repo.repo,
              sha:     context.payload.pull_request.head.sha,
              state:   'pending',
              context: 'test',
            });

      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await new Promise(r => setTimeout(r, 30000));
            await github.repos.createCommitStatus({
              owner:       context.repo.owner,
              repo:        context.repo.repo,
              sha:         context.payload.pull_request.head.sha,
              state:       'success',
              description: 'good string',
              context:     'test',
            });

  wait-for-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            while (true) {
              const result = await github.repos.listCommitStatusesForRef({
                owner:   context.repo.owner,
                repo:    context.repo.repo,
                ref:     context.payload.pull_request.head.sha,
              });
              const success = (status) => status.state == 'success'
              const hasGoodDescription = (status) => status.description == 'good string'
              const failed = (status) => status.state == 'failed'
              if (result.data.every(success) && result.data.every(hasGoodDescription)) {
                console.log("everything has succeeded");
                break;
              }
              if (result.data.select(failed)) {
                core.setFailed('a status failed');
                break;
              }
              console.log("waiting...");
              await new Promise(r => setTimeout(r, 2000));
            }


