name: pr
on:
  pull_request:
    types:
      - synchronize
      - opened
jobs:
  create-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.repos.createCommitStatus({
              owner:   context.repo.owner,
              repo:    context.repo.repo,
              sha:     context.payload.pull_request.head.sha,
              state:   'pending',
              context: 'test',
            });

      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await new Promise(r => setTimeout(r, 30000));
            await github.repos.createCommitStatus({
              owner:       context.repo.owner,
              repo:        context.repo.repo,
              sha:         context.payload.pull_request.head.sha,
              state:       'success',
              description: 'good string',
              context:     'test',
            });

  wait-for-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        timeout-minutes: 3
        env:
          CONTEXT_INCLUDES: test
          DESCRIPTION_INCLUDES: good string
          DEBUG: 'true'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            while (true) {
              const result = await github.repos.getCombinedStatusForRef({
                owner:   context.repo.owner,
                repo:    context.repo.repo,
                ref:     context.payload.pull_request.head.sha,
              });

              const matchesContext = (status) => status.context.includes(process.env.CONTEXT_INCLUDES)

              const hasGoodDescription = (status) => status.description.includes(process.env.DESCRIPTION_INCLUDES)

              const success = (status) => status.state == 'success'

              const failed = (status) => status.state == 'failed' || status.state == 'error'

              const matchingStatuses = result.data.statuses.find(matchesContext);
              if (Array.isArray(matchingStatuses)) {
                if (matchingStatuses.every(success)) {
                  if (matchingStatuses.every(hasGoodDescription)) {
                    console.log(`all statuses matching ${process.env.CONTEXT_INCLUDES} have succeeded and have output matching ${process.env.DESCRIPTION_INCLUDES}`);
                    break;
                  }
                  console.log(`statuses matching ${process.env.CONTEXT_INCLUDES} found, not all done yet`);
                } 
                if (matchingStatuses.find(failed)) {
                  core.setFailed(`a status matching ${process.env.CONTEXT_INCLUDES} failed`);
                  break;
                }
              }

              console.log(`No statuses matching ${process.env.CONTEXT_INCLUDES} found yet`);
              if (process.env.DEBUG == "true") {
                console.log(result.data.statuses);
                console.log(matchingStatuses);
                console.log(typeof matchingStatuses);
              }
              await new Promise(r => setTimeout(r, 2000));
            }


