name: mergeable
on:
  # kick off a mergeable check in response to events that immediately precede review
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
      - review_requested
  # observe our generated statuses and check on the PRs they're related to
  status:
  # allow manually triggering a re-check
  workflow_dispatch:
  # check when things are pushed to the default branch too
  push:
    branches:
      - main
      - master  
  
  schedule:
    - cron:  '*/15 * * * *'


env:
  LABEL: mergeable
  UPDATE_MERGEABLE_BUT_BEHIND: "true"
  RETRY_INTERVAL: "5000"

jobs:
  dispatch-mergeable-check:
    # needs: your-slowest-other-workflow
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: dispatch-mergeable-check
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.MACHINE_USER_TOKEN }}
          script: |
            await github.repos.createCommitStatus({
              ...context.repo,
              sha:         context.payload.pull_request.head.sha,
              state:       'success',
              context:     'mergeable',
              description: 'Mergeable status will be checked in the background.',
              target_url:  `${context.payload.pull_request.head.repo.html_url}/actions?query=workflow:mergeable`
            });

  process-mergeable-check:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/github-script@v3
        timeout-minutes: 30
        with:
          github-token: ${{ secrets.MACHINE_USER_TOKEN }}
          script: |
            var prs = [];

            if (context.payload.sha && context.payload.context == 'mergeable') {
              const statusPrs = await github.repos.listPullRequestsAssociatedWithCommit({
                ...context.repo,
                commit_sha: context.payload.sha
              })
              if (statusPrs.data.length === 0) {
                return;
              }
              prs = statusPrs.data;
            } else {
              const opts = github.pulls.list.endpoint.merge({
                ...context.repo,
                state: 'open',
                sort: 'updated',
                direction: 'desc'
              })
              var prs = await github.paginate(opts);
            }

            await Promise.all(prs.map(async (pr) => {
              if (pr.state != 'open') {
                return;
              }
              console.log(`html_url=${pr.html_url} mergeable=${pr.mergeable} mergeable_state=${pr.mergeable_state}`);
              var mergeable = pr.mergeable;
              var mergeable_state = pr.mergeable_state;
              while (mergeable == null) {
                await new Promise(r => setTimeout(r, ${{ env.RETRY_INTERVAL }}));
                const updatedPr = await github.pulls.get({
                  ...context.repo,
                  pull_number: pr.number
                });
                console.log(`html_url=${updatedPr.data.html_url} mergeable=${updatedPr.data.mergeable} mergeable_state=${updatedPr.data.mergeable_state}`);
                mergeable = updatedPr.data.mergeable;
                mergeable_state = updatedPr.data.mergeable_state;
              }
              if (mergeable && mergeable_state == "clean") {
                await github.issues.addLabels({
                  ...context.repo,
                  issue_number: pr.number,
                  labels: [process.env.LABEL]
                })
              } else {
                if (mergeable_state == "behind" && ${{ env.UPDATE_MERGEABLE_BUT_BEHIND }}) {
                  github.pulls.updateBranch({
                    ...context.repo,
                    pull_number: pr.number
                  });
                }
                try {
                  await github.issues.removeLabel({
                    ...context.repo,
                    issue_number: pr.number,
                    name: process.env.LABEL
                  })
                } catch (e) {
                  if (e.status != 404) {
                    throw(e);
                  }
                }
              }
            }));
